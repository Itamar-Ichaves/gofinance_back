// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: category.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
  tenant_id,
  nome,
  descricao
) VALUES (
  $1, $2, $3
) RETURNING id, tenant_id, users_id, nome, descricao, created_at, updated_at
`

type CreateCategoryParams struct {
	TenantID  uuid.UUID `json:"tenant_id"`
	Nome      string    `json:"nome"`
	Descricao string    `json:"descricao"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.TenantID, arg.Nome, arg.Descricao)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.UsersID,
		&i.Nome,
		&i.Descricao,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategories = `-- name: DeleteCategories :exec
DELETE FROM categories
WHERE id = $1 AND tenant_id = $2
`

type DeleteCategoriesParams struct {
	ID       uuid.UUID `json:"id"`
	TenantID uuid.UUID `json:"tenant_id"`
}

func (q *Queries) DeleteCategories(ctx context.Context, arg DeleteCategoriesParams) error {
	_, err := q.db.ExecContext(ctx, deleteCategories, arg.ID, arg.TenantID)
	return err
}

const getCategories = `-- name: GetCategories :many
SELECT id, tenant_id, users_id, nome, descricao, created_at, updated_at FROM categories
WHERE
  tenant_id = $1
AND
  users_id = $2
AND
  LOWER(nome) LIKE CONCAT('%', LOWER($3::text), '%')
AND
  LOWER(description) LIKE CONCAT('%', LOWER($4::text), '%')
`

type GetCategoriesParams struct {
	TenantID uuid.UUID `json:"tenant_id"`
	UsersID  uuid.UUID `json:"users_id"`
	Column3  string    `json:"column_3"`
	Column4  string    `json:"column_4"`
}

func (q *Queries) GetCategories(ctx context.Context, arg GetCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategories,
		arg.TenantID,
		arg.UsersID,
		arg.Column3,
		arg.Column4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.UsersID,
			&i.Nome,
			&i.Descricao,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, tenant_id, users_id, nome, descricao, created_at, updated_at FROM categories
WHERE id = $1 AND tenant_id = $2 LIMIT 1
`

type GetCategoryParams struct {
	ID       uuid.UUID `json:"id"`
	TenantID uuid.UUID `json:"tenant_id"`
}

func (q *Queries) GetCategory(ctx context.Context, arg GetCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, arg.ID, arg.TenantID)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.UsersID,
		&i.Nome,
		&i.Descricao,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCategories = `-- name: UpdateCategories :one
UPDATE categories
SET nome = $2, descricao = $3
WHERE id = $1 AND tenant_id = $4
RETURNING id, tenant_id, users_id, nome, descricao, created_at, updated_at
`

type UpdateCategoriesParams struct {
	ID        uuid.UUID `json:"id"`
	Nome      string    `json:"nome"`
	Descricao string    `json:"descricao"`
	TenantID  uuid.UUID `json:"tenant_id"`
}

func (q *Queries) UpdateCategories(ctx context.Context, arg UpdateCategoriesParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategories,
		arg.ID,
		arg.Nome,
		arg.Descricao,
		arg.TenantID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.UsersID,
		&i.Nome,
		&i.Descricao,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
