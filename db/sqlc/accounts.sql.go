// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: accounts.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  id,
  tenant_id,
  users_id,
  category_id,
  nome,
  fornecedor,
  type,
  value,
  codigo_barras,
  comprovante_pdf,
  pix_conta_bancaria,
  description,
  period,
  status,
  created_at,
  updated_at
) VALUES (
  uuid_generate_v4(),
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
) RETURNING id, tenant_id, users_id, category_id, nome, fornecedor, type, value, codigo_barras, comprovante_pdf, pix_conta_bancaria, description, period, status, created_at, updated_at
`

type CreateAccountParams struct {
	TenantID         uuid.UUID `json:"tenant_id"`
	UsersID          uuid.UUID `json:"users_id"`
	CategoryID       uuid.UUID `json:"category_id"`
	Nome             string    `json:"nome"`
	Fornecedor       string    `json:"fornecedor"`
	Type             string    `json:"type"`
	Value            string    `json:"value"`
	CodigoBarras     string    `json:"codigo_barras"`
	ComprovantePdf   []byte    `json:"comprovante_pdf"`
	PixContaBancaria string    `json:"pix_conta_bancaria"`
	Description      string    `json:"description"`
	Period           string    `json:"period"`
	Status           string    `json:"status"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.TenantID,
		arg.UsersID,
		arg.CategoryID,
		arg.Nome,
		arg.Fornecedor,
		arg.Type,
		arg.Value,
		arg.CodigoBarras,
		arg.ComprovantePdf,
		arg.PixContaBancaria,
		arg.Description,
		arg.Period,
		arg.Status,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.UsersID,
		&i.CategoryID,
		&i.Nome,
		&i.Fornecedor,
		&i.Type,
		&i.Value,
		&i.CodigoBarras,
		&i.ComprovantePdf,
		&i.PixContaBancaria,
		&i.Description,
		&i.Period,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1 AND tenant_id = $2
`

type DeleteAccountParams struct {
	ID       uuid.UUID `json:"id"`
	TenantID uuid.UUID `json:"tenant_id"`
}

func (q *Queries) DeleteAccount(ctx context.Context, arg DeleteAccountParams) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, arg.ID, arg.TenantID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, tenant_id, users_id, category_id, nome, fornecedor, type, value, codigo_barras, comprovante_pdf, pix_conta_bancaria, description, period, status, created_at, updated_at FROM accounts
WHERE id = $1 AND tenant_id = $2 LIMIT 1
`

type GetAccountParams struct {
	ID       uuid.UUID `json:"id"`
	TenantID uuid.UUID `json:"tenant_id"`
}

func (q *Queries) GetAccount(ctx context.Context, arg GetAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, arg.ID, arg.TenantID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.UsersID,
		&i.CategoryID,
		&i.Nome,
		&i.Fornecedor,
		&i.Type,
		&i.Value,
		&i.CodigoBarras,
		&i.ComprovantePdf,
		&i.PixContaBancaria,
		&i.Description,
		&i.Period,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT
  a.id,
  a.tenant_id,
  a.users_id,
  a.category_id,
  a.nome,
  a.fornecedor,
  a.type,
  a.value,
  a.codigo_barras,
  a.comprovante_pdf,
  a.pix_conta_bancaria,
  a.description,
  a.period,
  a.status,
  a.created_at,
  a.updated_at,
  c.nome as category_nome
FROM
  accounts a
LEFT JOIN
  categories c ON c.id = a.category_id
WHERE
  a.tenant_id = $1
AND
  a.users_id = $2
AND
  a.type = $3
AND
  LOWER(a.nome) LIKE CONCAT('%', LOWER($4::text), '%')
AND
  LOWER(a.description) LIKE CONCAT('%', LOWER($5::text), '%')
AND
  a.category_id = COALESCE($6, a.category_id)
AND
  a.period = COALESCE($7, a.period)
`

type GetAccountsParams struct {
	TenantID   uuid.UUID `json:"tenant_id"`
	UsersID    uuid.UUID `json:"users_id"`
	Type       string    `json:"type"`
	Column4    string    `json:"column_4"`
	Column5    string    `json:"column_5"`
	CategoryID uuid.UUID `json:"category_id"`
	Period     string    `json:"period"`
}

type GetAccountsRow struct {
	ID               uuid.UUID      `json:"id"`
	TenantID         uuid.UUID      `json:"tenant_id"`
	UsersID          uuid.UUID      `json:"users_id"`
	CategoryID       uuid.UUID      `json:"category_id"`
	Nome             string         `json:"nome"`
	Fornecedor       string         `json:"fornecedor"`
	Type             string         `json:"type"`
	Value            string         `json:"value"`
	CodigoBarras     string         `json:"codigo_barras"`
	ComprovantePdf   []byte         `json:"comprovante_pdf"`
	PixContaBancaria string         `json:"pix_conta_bancaria"`
	Description      string         `json:"description"`
	Period           string         `json:"period"`
	Status           string         `json:"status"`
	CreatedAt        time.Time      `json:"created_at"`
	UpdatedAt        time.Time      `json:"updated_at"`
	CategoryNome     sql.NullString `json:"category_nome"`
}

func (q *Queries) GetAccounts(ctx context.Context, arg GetAccountsParams) ([]GetAccountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAccounts,
		arg.TenantID,
		arg.UsersID,
		arg.Type,
		arg.Column4,
		arg.Column5,
		arg.CategoryID,
		arg.Period,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAccountsRow{}
	for rows.Next() {
		var i GetAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.UsersID,
			&i.CategoryID,
			&i.Nome,
			&i.Fornecedor,
			&i.Type,
			&i.Value,
			&i.CodigoBarras,
			&i.ComprovantePdf,
			&i.PixContaBancaria,
			&i.Description,
			&i.Period,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CategoryNome,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountsGraph = `-- name: GetAccountsGraph :one
SELECT COUNT(*) FROM accounts
WHERE tenant_id = $1 AND users_id = $2 AND type = $3
`

type GetAccountsGraphParams struct {
	TenantID uuid.UUID `json:"tenant_id"`
	UsersID  uuid.UUID `json:"users_id"`
	Type     string    `json:"type"`
}

func (q *Queries) GetAccountsGraph(ctx context.Context, arg GetAccountsGraphParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAccountsGraph, arg.TenantID, arg.UsersID, arg.Type)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAccountsReports = `-- name: GetAccountsReports :one
SELECT SUM(value) AS sum_value FROM accounts
WHERE tenant_id = $1 AND users_id = $2 AND type = $3
`

type GetAccountsReportsParams struct {
	TenantID uuid.UUID `json:"tenant_id"`
	UsersID  uuid.UUID `json:"users_id"`
	Type     string    `json:"type"`
}

func (q *Queries) GetAccountsReports(ctx context.Context, arg GetAccountsReportsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAccountsReports, arg.TenantID, arg.UsersID, arg.Type)
	var sum_value int64
	err := row.Scan(&sum_value)
	return sum_value, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET 
  nome = $2, 
  fornecedor = $3,
  type = $4,
  value = $5,
  codigo_barras = $6,
  comprovante_pdf = $7,
  pix_conta_bancaria = $8,
  description = $9,
  period = $10,
  status = $11,
  updated_at = CURRENT_TIMESTAMP
WHERE 
  id = $1 AND tenant_id = $12
RETURNING id, tenant_id, users_id, category_id, nome, fornecedor, type, value, codigo_barras, comprovante_pdf, pix_conta_bancaria, description, period, status, created_at, updated_at
`

type UpdateAccountParams struct {
	ID               uuid.UUID `json:"id"`
	Nome             string    `json:"nome"`
	Fornecedor       string    `json:"fornecedor"`
	Type             string    `json:"type"`
	Value            string    `json:"value"`
	CodigoBarras     string    `json:"codigo_barras"`
	ComprovantePdf   []byte    `json:"comprovante_pdf"`
	PixContaBancaria string    `json:"pix_conta_bancaria"`
	Description      string    `json:"description"`
	Period           string    `json:"period"`
	Status           string    `json:"status"`
	TenantID         uuid.UUID `json:"tenant_id"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.ID,
		arg.Nome,
		arg.Fornecedor,
		arg.Type,
		arg.Value,
		arg.CodigoBarras,
		arg.ComprovantePdf,
		arg.PixContaBancaria,
		arg.Description,
		arg.Period,
		arg.Status,
		arg.TenantID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.UsersID,
		&i.CategoryID,
		&i.Nome,
		&i.Fornecedor,
		&i.Type,
		&i.Value,
		&i.CodigoBarras,
		&i.ComprovantePdf,
		&i.PixContaBancaria,
		&i.Description,
		&i.Period,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
