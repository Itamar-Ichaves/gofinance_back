// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: tenant.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createTenant = `-- name: CreateTenant :one
INSERT INTO "tenant" (nome) 
VALUES ($1) 
RETURNING id, nome, created_at, updated_at
`

func (q *Queries) CreateTenant(ctx context.Context, nome string) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, createTenant, nome)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTenant = `-- name: DeleteTenant :exec
DELETE FROM "tenant" 
WHERE id = $1
`

func (q *Queries) DeleteTenant(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTenant, id)
	return err
}

const getTenant = `-- name: GetTenant :one
SELECT id, nome, created_at, updated_at 
FROM "tenant" 
WHERE id = $1
`

func (q *Queries) GetTenant(ctx context.Context, id uuid.UUID) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenant, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTenants = `-- name: ListTenants :many
SELECT id, nome, created_at, updated_at 
FROM "tenant"
`

func (q *Queries) ListTenants(ctx context.Context) ([]Tenant, error) {
	rows, err := q.db.QueryContext(ctx, listTenants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tenant{}
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenant = `-- name: UpdateTenant :exec
UPDATE "tenant" 
SET nome = $2, updated_at = CURRENT_TIMESTAMP 
WHERE id = $1
`

type UpdateTenantParams struct {
	ID   uuid.UUID `json:"id"`
	Nome string    `json:"nome"`
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) error {
	_, err := q.db.ExecContext(ctx, updateTenant, arg.ID, arg.Nome)
	return err
}
